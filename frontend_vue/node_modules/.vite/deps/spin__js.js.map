{
  "version": 3,
  "sources": ["../../spin.js/spin.js"],
  "sourcesContent": ["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar defaults = {\n    lines: 12,\n    length: 7,\n    width: 5,\n    radius: 10,\n    scale: 1.0,\n    corners: 1,\n    color: '#000',\n    fadeColor: 'transparent',\n    animation: 'spinner-line-fade-default',\n    rotate: 0,\n    direction: 1,\n    speed: 1,\n    zIndex: 2e9,\n    className: 'spinner',\n    top: '50%',\n    left: '50%',\n    shadow: '0 0 1px transparent', // prevent aliased lines\n    position: 'absolute',\n};\nvar Spinner = /** @class */ (function () {\n    function Spinner(opts) {\n        if (opts === void 0) { opts = {}; }\n        this.opts = __assign(__assign({}, defaults), opts);\n    }\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target by calling\n     * stop() internally.\n     */\n    Spinner.prototype.spin = function (target) {\n        this.stop();\n        this.el = document.createElement('div');\n        this.el.className = this.opts.className;\n        this.el.setAttribute('role', 'progressbar');\n        this.el.style.position = this.opts.position;\n        this.el.style.width = \"0\";\n        this.el.style.zIndex = this.opts.zIndex.toString();\n        this.el.style.left = this.opts.left;\n        this.el.style.top = this.opts.top;\n        this.el.style.transform = \"scale(\".concat(this.opts.scale, \")\");\n        if (target) {\n            target.insertBefore(this.el, target.firstChild || null);\n        }\n        drawLines(this.el, this.opts);\n        return this;\n    };\n    /**\n     * Stops and removes the Spinner.\n     * Stopped spinners may be reused by calling spin() again.\n     */\n    Spinner.prototype.stop = function () {\n        if (this.el) {\n            if (this.el.parentNode) {\n                this.el.parentNode.removeChild(this.el);\n            }\n            this.el = undefined;\n        }\n        return this;\n    };\n    return Spinner;\n}());\nexport { Spinner };\n/**\n * Returns the line color from the given string or array.\n */\nfunction getColor(color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length];\n}\n/**\n * Internal method that draws the individual lines.\n */\nfunction drawLines(el, opts) {\n    var borderRadius = (Math.round(opts.corners * opts.width * 500) / 1000) + 'px';\n    var shadow = 'none';\n    if (opts.shadow === true) {\n        shadow = '0 2px 4px #000'; // default shadow\n    }\n    else if (typeof opts.shadow === 'string') {\n        shadow = opts.shadow;\n    }\n    var shadows = parseBoxShadow(shadow);\n    for (var i = 0; i < opts.lines; i++) {\n        var degrees = ~~(360 / opts.lines * i + opts.rotate);\n        var backgroundLine = document.createElement('div');\n        backgroundLine.style.position = 'absolute';\n        backgroundLine.style.top = \"\".concat(-opts.width / 2, \"px\");\n        backgroundLine.style.width = (opts.length + opts.width) + 'px';\n        backgroundLine.style.height = opts.width + 'px';\n        backgroundLine.style.background = getColor(opts.fadeColor, i);\n        backgroundLine.style.borderRadius = borderRadius;\n        backgroundLine.style.transformOrigin = 'left';\n        backgroundLine.style.transform = \"rotate(\".concat(degrees, \"deg) translateX(\").concat(opts.radius, \"px)\");\n        var delay = i * opts.direction / opts.lines / opts.speed;\n        delay -= 1 / opts.speed; // so initial animation state will include trail\n        var line = document.createElement('div');\n        line.style.width = '100%';\n        line.style.height = '100%';\n        line.style.background = getColor(opts.color, i);\n        line.style.borderRadius = borderRadius;\n        line.style.boxShadow = normalizeShadow(shadows, degrees);\n        line.style.animation = \"\".concat(1 / opts.speed, \"s linear \").concat(delay, \"s infinite \").concat(opts.animation);\n        backgroundLine.appendChild(line);\n        el.appendChild(backgroundLine);\n    }\n}\nfunction parseBoxShadow(boxShadow) {\n    var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\n    var shadows = [];\n    for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\n        var shadow = _a[_i];\n        var matches = shadow.match(regex);\n        if (matches === null) {\n            continue; // invalid syntax\n        }\n        var x = +matches[2];\n        var y = +matches[5];\n        var xUnits = matches[4];\n        var yUnits = matches[7];\n        if (x === 0 && !xUnits) {\n            xUnits = yUnits;\n        }\n        if (y === 0 && !yUnits) {\n            yUnits = xUnits;\n        }\n        if (xUnits !== yUnits) {\n            continue; // units must match to use as coordinates\n        }\n        shadows.push({\n            prefix: matches[1] || '', // could have value of 'inset' or undefined\n            x: x,\n            y: y,\n            xUnits: xUnits,\n            yUnits: yUnits,\n            end: matches[8],\n        });\n    }\n    return shadows;\n}\n/**\n * Modify box-shadow x/y offsets to counteract rotation\n */\nfunction normalizeShadow(shadows, degrees) {\n    var normalized = [];\n    for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\n        var shadow = shadows_1[_i];\n        var xy = convertOffset(shadow.x, shadow.y, degrees);\n        normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\n    }\n    return normalized.join(', ');\n}\nfunction convertOffset(x, y, degrees) {\n    var radians = degrees * Math.PI / 180;\n    var sin = Math.sin(radians);\n    var cos = Math.cos(radians);\n    return [\n        Math.round((x * cos + y * sin) * 1000) / 1000,\n        Math.round((-x * sin + y * cos) * 1000) / 1000,\n    ];\n}\n"],
  "mappings": "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",
  "names": ["Spinner"]
}
